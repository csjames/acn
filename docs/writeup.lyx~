#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass IEEEtran
\begin_preamble
\usepackage{stmaryrd}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Non-Naive Flooding Mesh Network using the Hope RF RFM69
\end_layout

\begin_layout Author
James Adams (ja5g14, 26824744)
\end_layout

\begin_layout Abstract
Flooding is used in many networks to build routing tables, for example in
 Open Shorting Path First routing.
 This is often the prerequisite to sending routed packets which are not
 received by all nodes in the network.
 By creating a mesh network which only uses flooding, this project endeavors
 to achieve a low computational overhead , leading to low node power usage
 and efficient broadcasting, as well as a simple implementation.
 This efficient broadcasting may see usefulness in home automation settings
 where messages may be relevant to all nodes in the network.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Section
Background Reading
\end_layout

\begin_layout Standard
Zigbee, LoRa
\end_layout

\begin_layout Standard
Appropriateness of each
\end_layout

\begin_layout Standard
Routing vs Flooding
\end_layout

\begin_layout Standard
Flooding is a simplistic routing algorithm in which incoming packets are
 re-transmitted by each receiving router.
 If flooding is uncontrolled this causes packets to be re transmitted continuous
ly, creating a broadcast storm, potentially rendering the network unusable.
\end_layout

\begin_layout Section
Difficulties
\end_layout

\begin_layout Standard
Initially high unreliability – required data whitening
\end_layout

\begin_layout Section
Technologies Used
\end_layout

\begin_layout Subsection
Persistence
\end_layout

\begin_layout Standard
For persistence and speed, Redis was used to store previous messages and
 discovered nodes.
 This was done due to the many easily accessible data structures available,
 for example circular queues, allowing the easy storing of the N most recent
 messages.
\end_layout

\begin_layout Subsection
Pub Sub
\end_layout

\begin_layout Standard
Initially REDIS was also to be used for publish subscribe methodology however
 we discovered that MQTT was far more useful due to the fact it supports
 Websockets when used in conjunction with the Mosquitto MQTT Broker.
 Though MQTT does offer data storage through the persistence of topics it
 did not grant us access to the same datatypes as Redis.
\end_layout

\begin_layout Section
Protocol
\end_layout

\begin_layout Standard
Each packet sent has a frame counter
\end_layout

\begin_layout Standard
this, along with to and from (16 bit) should be unique per message
\end_layout

\begin_layout Standard
subject to shallow enough packet memory
\end_layout

\begin_layout Standard
only repeat the first time the packet is not in memory – wait a while to
 repeat.
 A known time + a little offset for collision avoidance
\end_layout

\begin_layout Standard
send message with retry – if it fails wait a while and try again.
\end_layout

\begin_layout Standard
packet records its true origin
\end_layout

\begin_layout Subsection
Packet Format
\end_layout

\begin_layout Subsubsection
Unicast Packets (UCAST)
\end_layout

\begin_layout Subsubsection
Broadcast Packets (BCAST)
\end_layout

\begin_layout Subsubsection
Acknowledgment Packets (ACKS)
\end_layout

\begin_layout Standard
Acknowledgment packets are often smaller in size than the payload bearing
 data packets.
 Due to this being a demonstration project we opted to still use a payload
 as although it adds unnecessary packet bloat, causing an increased probability
 of message failure, it also facilitates the transmitting of debug information.
\end_layout

\begin_layout Section
Visualisation
\end_layout

\begin_layout Standard
Cytoscape.js was used to display the mesh network.
 We are able to trace
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "ref"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
